'use strict'
// 문제
// 0보다 크거나 같고, 99보다 작거나 같은 정수가 주어질 때 다음과 같은 연산을 할 수 있다. 먼저 주어진 수가 10보다 작다면 앞에 0을 붙여 두 자리 수로 만들고,
//  각 자리의 숫자를 더한다. 그 다음, 주어진 수의 가장 오른쪽 자리 수와 앞에서 구한 합의 가장 오른쪽 자리 수를 이어 붙이면 새로운 수를 만들 수 있다. 다음 예를 보자.

// 26부터 시작한다. 2+6 = 8이다. 새로운 수는 68이다. 6+8 = 14이다. 새로운 수는 84이다. 8+4 = 12이다. 새로운 수는 42이다. 4+2 = 6이다. 새로운 수는 26이다.

// 위의 예는 4번만에 원래 수로 돌아올 수 있다. 따라서 26의 사이클의 길이는 4이다.

// N이 주어졌을 때, N의 사이클의 길이를 구하는 프로그램을 작성하시오.

// 입력
// 첫째 줄에 N이 주어진다. N은 0보다 크거나 같고, 99보다 작거나 같은 정수이다.

// 출력
// 첫째 줄에 N의 사이클 길이를 출력한다.

// *나의 전략
// 1. 10보다 작은가 ? 앞에 0 : 통과 => N에 저장
// 2. N의 각 자리의 숫자를 더한다. => addN에 저장
// 3. N의 오른쪽 수 + addN의 오른쪽 수를 붙인다. => newN에 저장. 
// 4. 1~3의 과정을 처리하는 function에 newN을 넣는다. ..?
// 위 과정을 n번 반복하면 원래의 수로 돌아온다. (N과 일치하는지 검사)

// ? N번 반복할 수는 있겠는데 반복한 수를 어떻게 구할까?
// ! 함수에 임의의 수(count)를 넣어서 1회 반복시 ++ 하게 하여 N과 newN이 일치할 경우 console.log(count) 하자. 

const fs = require('fs');
const input = fs.readFileSync('dev/stdin').toString().trim();
if (+input < 10) {
    let N = `0${n}`
} else {
    let N = input // N을 두자리 숫자로 맞추기. 
}

function getNewN = (N) {
    let addN = `${N[0]*1 + N[1]*1}`;
    let newN = `${N[1]}${addN[1]}`;
    return newN; // newN구하기. 
}

while (newN !== input) {
    let newN = getNewN(input)
}
// 아직 세밀한 부분에서 계속 막히고 있다. 